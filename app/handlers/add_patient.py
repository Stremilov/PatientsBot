import re
from datetime import datetime

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from app.database import SessionLocal
from app.keyboards.reply.usermodes import main_kb
from app.loader import dp
from app.repositories.patient_repository import PatientRepository
from app.states.usermodes import AddPatientForm


def validate_string(input_string):
    pattern = r"^[–∞-—è–ê-–Ø0-9]+$"

    if re.match(pattern, input_string):
        return True
    else:
        return False


def check_age(date_of_birth):
    try:
        birth_date = datetime.strptime(date_of_birth, "%d.%m.%Y")
        today = datetime.today()
        age = (
            today.year
            - birth_date.year
            - ((today.month, today.day) < (birth_date.month, birth_date.day))
        )

        return 0 <= age <= 100
    except ValueError:
        return False


@dp.message(Command("add_patient"))
@dp.message(F.text == "üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ üë§")
async def add_patient(message: types.Message, state: FSMContext):
    await state.set_state(AddPatientForm.registerUserInfo)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")


@dp.message(AddPatientForm.registerUserInfo)
async def get_user_info(message: types.Message, state: FSMContext):
    user_data = message.text

    if all(validate_string(word) for word in user_data.split()):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ xx.xx.xxxx")
        await state.update_data(user_data=user_data)
        await state.set_state(AddPatientForm.registerUserAge)
    else:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"
        )


@dp.message(AddPatientForm.registerUserAge)
async def get_date_of_birth_and_register_user(
    message: types.Message, state: FSMContext
):
    user_data = await state.get_data()
    user_age = message.text
    user_info = user_data.get("user_data")

    db = SessionLocal()

    patient_repo = PatientRepository(db)

    if check_age(user_age):
        patient_repo.add_patient(name=user_info, date_of_birth=user_age)
        await message.answer("–ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â—ë–Ω –≤ –±–∞–∑—É")
        await state.set_state(None)
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_kb())
