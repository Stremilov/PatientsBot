from datetime import datetime

from aiogram import types, F
from aiogram.filters import Command

from app.database import SessionLocal
from app.keyboards.reply.usermodes import main_kb
from app.loader import dp
from app.repositories.patient_repository import PatientRepository


@dp.message(Command("get_patients_count_by_day"))
@dp.message(F.text == "üìã –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é üìã")
async def get_patients_count_by_day(message: types.Message):
    session = SessionLocal()
    patient_repo = PatientRepository(session)
    counts = patient_repo.get_patients_count_by_day()

    days_of_week = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    response = "<b>–ü–∞—Ü–∏–µ–Ω—Ç—ã –ø–æ –¥–Ω—è–º</b>\n"

    patients_count_by_day = {day: 0 for day in days_of_week.values()}

    for date_obj, count in counts:
        day_name = days_of_week[date_obj.weekday()]
        patients_count_by_day[day_name] += count

    for day_name, count in patients_count_by_day.items():
        response += f"<b>{day_name}:</b> {count} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤\n"

    await message.answer(response, parse_mode="html", reply_markup=main_kb())